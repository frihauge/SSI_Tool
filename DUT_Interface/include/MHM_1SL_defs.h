//Software and its documentation is provided by iC-Haus GmbH or contributors "AS IS" and is 
//subject to the ZVEI General Conditions for the Supply of Products and Services with iC-Haus
//amendments and the ZVEI Software clause with iC-Haus amendments (http://www.ichaus.de/EULA).

typedef struct
{
	unsigned long ulHighData;
	unsigned long ulLowData;
	unsigned long ulDataLength;
	unsigned long ulMultiturn;
	unsigned long ulSingleturn; 
	unsigned long ulError;
	unsigned long ulWarning;
	unsigned long ulLifeCounter;
	unsigned long ulStatusRegister; 
	unsigned long ulPortRegister;
	unsigned long ulGainRegister;
}   MHM_ReadSensStruct;

enum MHM_ErrorEnum{	eMHM_OK,
					eMHM_INVALID_HANDLE,				
					eMHM_INTERFACEDRIVER_NOT_FOUND,
					eMHM_INTERFACE_NOT_FOUND,
					eMHM_INVALID_INTERFACE,
					eMHM_INVALID_PARAMETER,
					eMHM_INVALID_ADDRESS,
					eMHM_INVALID_VALUE,
					eMHM_USB_ERROR,
					eMHM_FILE_NOT_FOUND,
					eMHM_INVALID_FILE,
					eMHM_VERIFY_FAILED,
					eMHM_MASTERCOMM_FAILED,
					eMHM_BISSCOMM_FAILED,
					eMHM_SPICOMM_FAILED,
					eMHM_USB_HIGHSPEED_WARNING,
					eMHM_INVALID_BISSMASTER,
					eMHM_NO_INTERFACE_SELECTED,
					eMHM_READPARAM_SSI,
					eMHM_SPI_ERROR,
					eMHM_SPI_DISMISS,
					eMHM_SPI_FAIL,
					eMHM_SPI_BUSY_TIMEOUT,
					eMHM_FILE_ACCESS_DENIED,
					eMHM_INVALID_CONFIGURATION,
					eMHM_INVALID_EDS,
					eMHM_INVALID_EDS_CHKSUM,
					eMHM_EDS_CORRECTED,
					eMHM_CORRECTED_INVALID_VALUE,
					eMHM_BISS_REGERROR,
					eMHM_EDS_UNDEFINED,
					eMHM_FILESIZE_WARNING,
					eMHM_SLOW_ROTATION,
					eMHM_FAST_ROTATION,
					eMHM_GAIN_LIMIT,
					eMHM_ACQUISITION_FAILED,
					eMHM_USB_DATA_LOSS,
					eMHM_INTERNAL_CALIB_ERROR,
					eMHM_OFFSET_LIMIT,
					eMHM_CALIBRATION_FAILED,
					eMHM_I2C_COMM_FAILED,
					eMHM_GAINCOSCORR_LIMIT,
					eMHM_HARMCAL_LIMIT,
					eMHM_BAD_CAL_DATA
};

enum MHM_InterfaceEnum {	eMHM_NO_INTERFACE, eMHM_MB3U_SPI, eMHM_MB3U_BISS, eMHM_MB4U, eMHM_MB5U};

enum MHM_InterfaceInfoEnum { eMHM_SERIAL_NUMBER};

enum MHM_ParamEnum { eMHM_AVGFILT, eMHM_TLF, eMHM_DIR, eMHM_HYS, eMHM_RESO_MT, eMHM_RESO_ST, eMHM_CF_MTI, eMHM_SBL_MTI, 
					eMHM_EBL_MTI, eMHM_GET_MTI, eMHM_CFG_IOP, eMHM_MT12, eMHM_RTX_MODE, eMHM_BIN_SSI, eMHM_EXT_SSI, 
					eMHM_ENSSI, eMHM_VOSS, eMHM_VOSC, eMHM_CIBM, eMHM_ENF, eMHM_TEST, eMHM_GAINF, eMHM_GAINR,
					eMHM_GCC, eMHM_ENAC, eMHM_CRCS, eMHM_ENLC, eMHM_REGPROT, eMHM_INSPROT, eMHM_PRES_IO1, 
					eMHM_DIR_IO2, eMHM_ENCMD3, eMHM_ENCMD2,	eMHM_CRC_CFG, eMHM_OFFS_MT, eMHM_OFFS_ST,
					eMHM_CRC_OFFS, eMHM_PSET_MT, eMHM_PSET_ST, eMHM_CRC_PSET, eMHM_ERR_CFG, eMHM_ERR_OFFS, 
					eMHM_ERR_POS, eMHM_ERR_EXT, eMHM_ERR_AMIN, eMHM_ERR_AMAX, eMHM_ERR_MTI, eMHM_ERR_MT, eMHM_GAIN, 
					eMHM_EDSBANK, eMHM_PRO_ID,
					eMHM_DEV_ID0, eMHM_DEV_ID1, eMHM_DEV_ID2, eMHM_DEV_ID3, 
					eMHM_DEV_ID4, eMHM_DEV_ID5, eMHM_MFG_ID0, eMHM_MFG_ID1, 
					eMHM_HARMCAL, eMHM_DISBISS, eMHM_NTOA, eMHM_ENCMD01, eMHM_CHIP_REL};

enum MHM_WriteVerifyEnum {	eMHM_SETONLY, eMHM_WRITE, eMHM_VERIFY };

enum MHM_ConfigDataEnum {	eMHM_CHIPVERSION, eMHM_USEUSB, eMHM_USELPT, eMHM_MASTERVER, eMHM_MASTERREV, eMHM_SLAVE_ID, 
							eMHM_SLAVECOUNT, eMHM_FREQ_SCD, eMHM_FREQ_AGS, eMHM_FREQ_SPI, eMHM_CLKENI, eMHM_BP, eMHM_MT_TYPE, eMHM_RESERVED0, eMHM_RESERVED1, eMHM_RESERVED2, eMHM_RESERVED3, eMHM_FREQ_SSI,
							eMHM_READ_STATUS_ENABLE, eMHM_READ_PORTS_ENABLE, eMHM_READ_GAIN_ENABLE, 
							eMHM_USB_PERFORMANCE, eMHM_ENABLE_TTL, eMHM_UPDATE_BISSID_ENABLE, eMHM_DISABLE_AUTOMATIC_TTL_SWITCH};

enum MHM_EdsParamEnum {	eMHM_EDS_EDS_VER, eMHM_EDS_EDS_LEN, eMHM_EDS_USR_STA, eMHM_EDS_USR_END, eMHM_EDS_TMA, eMHM_EDS_TO_MIN, eMHM_EDS_TO_MAX, 
						eMHM_EDS_TOS_MIN, eMHM_EDS_TOS_MAX, eMHM_EDS_TCLK_MIN, eMHM_EDS_TCLK_MAX, eMHM_EDS_TCYC, eMHM_EDS_TBUSY_S, eMHM_EDS_BUSY_S, 
						eMHM_EDS_PON_DLY, eMHM_EDS_DC_NUM, eMHM_EDS_SL_NUM, eMHM_EDS_SL_OFF,
						eMHM_EDS_BANK1, eMHM_EDS_DLEN1, eMHM_EDS_FORMAT1_STOP, eMHM_EDS_FORMAT1_ALIGN, eMHM_EDS_FORMAT1_TYPE, eMHM_EDS_CPOLY1,
						eMHM_EDS_BANK2, eMHM_EDS_DLEN2, eMHM_EDS_FORMAT2_STOP, eMHM_EDS_FORMAT2_ALIGN, eMHM_EDS_FORMAT2_TYPE, eMHM_EDS_CPOLY2,
						eMHM_EDS_BANK3, eMHM_EDS_DLEN3, eMHM_EDS_FORMAT3_STOP, eMHM_EDS_FORMAT3_ALIGN, eMHM_EDS_FORMAT3_TYPE, eMHM_EDS_CPOLY3,
						eMHM_EDS_BANK4, eMHM_EDS_DLEN4, eMHM_EDS_FORMAT4_STOP, eMHM_EDS_FORMAT4_ALIGN, eMHM_EDS_FORMAT4_TYPE, eMHM_EDS_CPOLY4,
						eMHM_EDS_BANK5, eMHM_EDS_DLEN5, eMHM_EDS_FORMAT5_STOP, eMHM_EDS_FORMAT5_ALIGN, eMHM_EDS_FORMAT5_TYPE, eMHM_EDS_CPOLY5,
						eMHM_EDS_BANK6, eMHM_EDS_DLEN6, eMHM_EDS_FORMAT6_STOP, eMHM_EDS_FORMAT6_ALIGN, eMHM_EDS_FORMAT6_TYPE, eMHM_EDS_CPOLY6,
						eMHM_EDS_BANK7, eMHM_EDS_DLEN7, eMHM_EDS_FORMAT7_STOP, eMHM_EDS_FORMAT7_ALIGN, eMHM_EDS_FORMAT7_TYPE, eMHM_EDS_CPOLY7,
						eMHM_EDS_BANK8, eMHM_EDS_DLEN8, eMHM_EDS_FORMAT8_STOP, eMHM_EDS_FORMAT8_ALIGN, eMHM_EDS_FORMAT8_TYPE, eMHM_EDS_CPOLY8,
						eMHM_EDS_BC_OFF, eMHM_EDS_BP_VER, eMHM_EDS_BP_LEN, eMHM_EDS_BP_ID, eMHM_EDS_FB1, eMHM_EDS_FB2, 
						eMHM_EDS_PON_PDL, eMHM_EDS_EN_TYP, eMHM_EDS_POS_NUM, eMHM_EDS_MT_LEN, eMHM_EDS_MT_FMT, eMHM_EDS_CO_LEN, eMHM_EDS_CO_FMT, 
						eMHM_EDS_FI_LEN, eMHM_EDS_FI_FMT, eMHM_EDS_MT_CNT, eMHM_EDS_SIP_CNT, eMHM_EDS_SIP_RES, eMHM_EDS_CPOLY, eMHM_EDS_CSTART,
						eMHM_EDS_ABS_ACU, eMHM_EDS_REL_ACU, eMHM_EDS_SPD_ACU, eMHM_EDS_HYST, eMHM_EDS_SPD_MAX, eMHM_EDS_ACC_MAX, eMHM_EDS_TMP_MIN, 
						eMHM_EDS_TMP_MAX, eMHM_EDS_VLT_MIN, eMHM_EDS_VLT_MAX, eMHM_EDS_CUR_MAX};

enum MHM_E2PAreaEnum { eMHM_E2P_CFG_MHM,	
											 eMHM_E2P_CFG_MT,		
											 eMHM_E2P_EDS,				
											 eMHM_E2P_ALL,
											 eMHM_E2P_CFG_MHM_NO_OFFS};



enum MHM_ReferenceEnum {
	eMHM_CONST_VELOCITY,  
	eMHM_FIRST_ORDER,     
	eMHM_SECOND_ORDER,    
	eMHM_MOVING_MEAN,     
	eMHM_MOVING_ACCEL,
	eMHM_REF_EXTERNAL};
	
enum MHM_CalDataEnum {
	eMHM_DUTRAW,		   
	eMHM_DUTCONT,			
	eMHM_REFCONT,		
	eMHM_DUTERR,		
	eMHM_ADJERR,		
	eMHM_REFRAW}; 

enum MHM_CalParamEnum {
	eMHM_CAL_SINOFF,		  
	eMHM_CAL_COSOFF,
	eMHM_CAL_GAINCOSCORR,
	eMHM_CAL_HARM4,
	eMHM_CAL_RPM,
	};

	enum MHM_CalCfgEnum{
	eMHM_CAL_FREQ_SPI, 
	eMHM_CAL_FREQ_SCD, 
	eMHM_CAL_FREQ_AGS,
	eMHM_CAL_REF_TYPE,
	eMHM_CAL_REF_RES,
	eMHM_CAL_REF_PER,
	eMHM_CAL_QUALITY_CHECK
	};

	enum MHM_ErrorTypeEnum{
	eMHM_NONE,
	eMHM_HINT,
	eMHM_WARNING,
	eMHM_PROGRAMMING_ERROR,
	eMHM_OPERATING_ERROR,
	eMHM_COMMUNICATION_ERROR
	};
